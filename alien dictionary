/*
Problem Statement:

Given a sorted dictionary of an alien language having N words and K starting alphabets of standard dictionary, find the order of characters in the alien language.

Note:
Many orders may be possible for a particular test case, thus you may return any valid order and output will be 1 if the order of string returned by the function is correct else 0 denoting incorrect string returned.

Example 1:

Input:
N = 5, K = 4
dict = { "baa", "abcd", "abca", "cab", "cad" }

Output:
1

Explanation:
Here order of characters is 'b', 'd', 'a', 'c'.
Note that words are sorted and in the given language "baa" comes before "abcd", therefore 'b' is before 'a' in output.
Similarly we can find other orders.
*/

#include <iostream>
#include <vector>
#include <queue>
#include <string>
using namespace std;

class Solution {
private:
    vector<int> topoSort(int K, vector<int> adj[]) {
        vector<int> indegree(K, 0);
        for (int i = 0; i < K; i++) {
            for (auto it : adj[i]) {
                indegree[it]++;
            }
        }

        queue<int> q;
        for (int i = 0; i < K; i++) {
            if (indegree[i] == 0)
                q.push(i);
        }

        vector<int> ans;
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            ans.push_back(node);
            for (auto it : adj[node]) {
                indegree[it]--;
                if (indegree[it] == 0)
                    q.push(it);
            }
        }
        return ans;
    }

public:
    string findOrder(string dict[], int N, int K) {
        vector<int> adj[K];

        // Build the graph
        for (int i = 0; i < N - 1; i++) {
            string s1 = dict[i];
            string s2 = dict[i + 1];
            int len = min(s1.length(), s2.length());

            for (int j = 0; j < len; j++) {
                if (s1[j] != s2[j]) {
                    adj[s1[j] - 'a'].push_back(s2[j] - 'a');
                    break;
                }
            }
        }

        vector<int> topo = topoSort(K, adj);
        string ans = "";
        for (auto it : topo) {
            ans += (char)(it + 'a');
        }
        return ans;
    }
};

// Driver code
int main() {
    int N = 5, K = 4;
    string dict[] = { "baa", "abcd", "abca", "cab", "cad" };
    
    Solution obj;
    string order = obj.findOrder(dict, N, K);

    cout << "Alien Dictionary Order: " << order << endl;

    // Optional: You can validate the order here if needed.
    return 0;
}




NOTE : cases where this cannot be followed

abcd
abc
if there order would have been different, it would work(largest comes before shorter and no difference)


abc
bat
ade
this ain't following the order(cyclic dependency) a<b<a




